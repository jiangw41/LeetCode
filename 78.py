'''
78. Subsets
Medium

Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
'''
class Solution:
    '''
    cascading 
    No matter how many elements in nums, the result always has [], so starting from [[]], we add numbers to the result one by one. When we add one number, we keep all
    elements in the current answer list. And we need to add more lists generated by 
    appending the number to each member in the current answer list. 

    Complexity: time and space: O(n * 2 ^ n)

    '''
    def subsets(self, nums: List[int]) -> List[List[int]]:
        if not nums: return nums
        r = [[], [nums[0]]]
        for i in range(1, len(nums)):
            r += list(map(lambda x: x+[nums[i]], r))
        return r
